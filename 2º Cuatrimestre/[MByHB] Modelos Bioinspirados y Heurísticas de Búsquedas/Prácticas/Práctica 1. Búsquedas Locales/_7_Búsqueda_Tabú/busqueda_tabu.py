import random

import constantes
import funciones_base as base
import statistics
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

isRandom = False
numero_repeticiones = 5

# Constantes
capacidad_bateria = constantes.capacidad_bateria
# granularidades = constantes.granularidad
semillas = constantes.semillas
precio_venta, precio_compra, r = base.get_vectores(isRandom)

evaluaciones = np.tile(np.array([0 for _ in range(numero_repeticiones)], dtype=np.float64), (3, 1))
dinero = np.tile(np.array([0 for _ in range(numero_repeticiones)], dtype=np.float64), (3, 1))

# Par√°metros Tab√∫:

'''
Memoria a Corto Plazo: def mov(pos, cantidad)
¬∑ Orientado a Atributo: A pos le corresponde la nueva cantidad absoluta.
¬∑ Orientado a Movimiento: A pos le corresponde la cantidad anterior mas la nueva cantidad.

Tenencia Tab√∫:
Cada 1000 iteraciones se reinicia. La longitud de la cola se divide/multiplica por 2.

üü¢Ô∏è Criterio de Aspiraci√≥n: Que sea mejor que la mejor soluci√≥n

üü¢ Lista de Candidatos: No existe una lista de candidatos. Nuestros candidatos ser√° la generaci√≥n de X vecinos.
Se generan los mismos vecinos que en ES (10).

'''

'''
Generaci√≥n de Vecinos:
Generaremos un vecino incrementando o decrementando aleatoriamente una posici√≥n aleatoria 
de la soluci√≥n actual.
'''


def GenerarVecino(solucion, pos):
    granularidad = 10   # En este algoritmo utilizaremos granularidad 10 fija.
    solucion_vecina = solucion.copy()
    accion = random.randint(0, 1)  # Elige una accion (decrementar o incrementar)

    if accion == 0:  # Incrementa
        solucion_vecina[pos] += granularidad
        if solucion_vecina[pos] > 100:
            solucion_vecina[pos] = 100
    else:  # Decrementa
        solucion_vecina[pos] -= granularidad
        if solucion_vecina[pos] < -100:
            solucion_vecina[pos] = -100

    return solucion_vecina


'''
Matriz de Frecuencias (M):
Se utiliza para almacenar una estad√≠stica de las veces que ya hemos estado en un vecino.
Se le dar√° mayor probabilidad a los valores menos habituales. 
Al comienzo, se inicializa a 1 para que toda la probabilidad sea uniforme.

Como las variables son enteras, se utiliza una matriz bidimensional, como contador de
las veces que la variable i toma el valor k: M[i,k]
'''


def InicializarMemoriaDeFrecuencias():
    return np.ones((24, 21))


def IncrementarPosicion(memoria_frecuencias, posicion):
    fila, columna = posicion
    memoria_frecuencias[fila, posicion] += 1
    return memoria_frecuencias


def RuletaInversa():
    return


'''
Greedy Probabilistico:
La soluci√≥n greedy debe generar soluciones con mayor probabilidad para los valores
que menos veces se han producido en cada hora. 

Para cada hora se deber√° calcular las inversas de los valores acumulados y luego
normalizar para tener valores entre 0-1 correspondiente a su probabilidad. Se tirar√°
un dado y se elige el primer valor que supera dicho valor a√±adi√©ndose a la soluci√≥n
greedy
'''


def GreedyProbabilistico(semilla, cromosoma, matrizProbabilidades):
    random.seed(semilla)
    solucion_greedy = []
    for hora in cromosoma:
        numero = random.random()
        suma = 0
        for i in range(-100, 110, 10):
            suma += matrizProbabilidades(hora, i)
            if numero < suma:
                solucion_greedy.append(i)
                break
    return solucion_greedy


'''
Criterio de Aspiraci√≥n:
Criterio que permite saltarse el tab√∫.
En nuestro caso ser√° que la soluci√≥n actual sea mejor que la soluci√≥n mejor.
'''


def CriterioDeAspiracion(coste_actual, coste_mejor):
    return coste_actual > coste_mejor




'''
Algoritmo B√∫squeda Tab√∫:
Selecci√≥n de estrategias de reinicializaci√≥n:
 ¬∑ Reinicializaci√≥n construyendo una soluci√≥n inicial aleatoria : 25%
 ¬∑ Memoria a Largo Plazo : 50%
 ¬∑ Reinicializaci√≥n desde la mejor soluci√≥n : 25%
'''
def BusquedaTabu(semilla, iteraciones_maximas, numero_vecinos):
    random.seed(semilla)
    solucion_actual = base.generar_inicial(semilla, 24, 10)
    solucion_mejor = solucion_actual
    coste_mejor = base.funcion_evaluacion(solucion_mejor, isRandom)[0]
    M = InicializarMemoriaDeFrecuencias()
    num_iteraciones = 0
    tenencia_tabu = 4
    while(num_iteraciones < iteraciones_maximas):
        '''
        Estimar el n√∫mero m√°ximo de iteraciones en total. Se realizar√°n 4 reinicializaciones, es decir,
        una cada Numtotal-iteraciones/4. El tama√±o inicial de cada lista tab√∫ ser√° n=4, estos valores
        cambiar√°n despu√©s de las reinicializaciones seg√∫n se ha comentado.
        
        Variar el tama√±o de la lista tab√∫, increment√°ndola o reduci√©ndola en un 50% seg√∫n una decisi√≥n
        aleatoria uniforme, empezando la lista desde vac√≠o en cada reinicializaci√≥n
        '''
        if num_iteraciones % round(iteraciones_maximas/4):
            # Reiniciar lista tab√∫
            rand = random.random()
            if rand < 0.5:
                tenencia_tabu -= tenencia_tabu*1/2
            else:
                tenencia_tabu += tenencia_tabu*1/2
        # Generamos numero_vecinos
        for nv in range(numero_vecinos):
            solucion_actual = GenerarVecino(solucion_actual, random.randint(0, 23))
            # Si supera el criterio de aspiraci√≥n
            if CriterioDeAspiracion(base.funcion_evaluacion(solucion_actual,isRandom)[0], coste_mejor):
                # TODO
                break




